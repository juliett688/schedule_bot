from config import *


def get_template(name, time, id, time_zone = '–ø–æ –º—Å–∫'):
    templates = [
        f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}!) \n\n–ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ —É—Ä–æ–∫ –∑–∞–≤—Ç—Ä–∞ –≤ {time} {time_zone}! –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è)',
        f'–ü—Ä–∏–≤–µ—Ç, {name}!) \n\n–ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ –Ω–∞ —É—Ä–æ–∫–µ –≤ {time} {time_zone}!',
        f'–ü—Ä–∏–≤–µ—Ç, {name}!üí´ \n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É—Ä–æ–∫ –∑–∞–≤—Ç—Ä–∞ –≤ {time} {time_zone}! –ñ–¥—É —Ç–µ–±—è)üòä',
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}!\n–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –∑–∞–Ω—è—Ç–∏–∏ –∑–∞–≤—Ç—Ä–∞ –≤ {time} {time_zone}! –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è)',
        f'–ü—Ä–∏–≤–µ—Ç, {name}!üí´ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É—Ä–æ–∫ –∑–∞–≤—Ç—Ä–∞ –≤ {time} {time_zone}!)'

    ]
    return templates[id]

def get_template_for_group(time, id):
    templates = [
        f'–†–µ–±—è—Ç–∞, –≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n–ó–∞–≤—Ç—Ä–∞ —É –Ω–∞—Å —Å–æ—Å—Ç–æ–∏—Ç—Å—è —É—Ä–æ–∫ –≤ {time} –ø–æ –º—Å–∫! –í—Å–µ—Ö –±—É–¥—É –∂–¥–∞—Ç—åüåü\n\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –¥–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–∏—à–∏—Ç–µ, –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!üòá',
        f'–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º, —Ä–µ–±—è—Ç–∞!\n\n–ó–∞–≤—Ç—Ä–∞ —É –Ω–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –≤ {time} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏! –ñ–¥—É –≤—Å–µ—Ö —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–ºüåü\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!üòá',
        f'–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!\n\n–£ –Ω–∞—Å –∑–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —É—Ä–æ–∫ –≤ {time} –ø–æ –º—Å–∫! –í—Å–µ—Ö –∂–¥—Éüåü\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –¥–∑, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å!üòá',
        f'–ü—Ä–∏–≤–µ—Ç, —Ä–µ–±—è—Ç–∞!\n\n–ó–∞–≤—Ç—Ä–∞ —É –Ω–∞—Å —É—Ä–æ–∫ –≤ {time} –ø–æ –º—Å–∫! –ñ–¥—É –≤—Å–µ—Öüåü\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –¥–æ–º–∞—à–∫–µ, –µ—Å–ª–∏ —á—Ç–æ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!üòá',
        f'–†–µ–±—è—Ç–∞, –ø—Ä–∏–≤–µ—Ç!\n\n–ó–∞–≤—Ç—Ä–∞ —É –Ω–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —É—Ä–æ–∫ –≤ {time} –ø–æ –º—Å–∫! –ñ–¥—É –≤—Å–µ—Öüåü\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!üòá'
    ]
    return templates[id]

def get_contacts_dict():
    global SHEET_INFO
    c = pygsheets.authorize(service_file='client_secret.json')
    sh_with_info = c.open_by_url(SHEET_INFO)
    sh_kod = sh_with_info[0]
    sh_my = sh_with_info[1]
    res = {} # dict {names:contacts}
    for x in (sh_kod, sh_my):
        info = x.get_values_batch(['A:A', 'D:D'])
        for i in range(len(info[0])):

            if info[0][i] and info[1][i]: # –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç
                res[info[0][i][0]] = info[1][i][0]
    return res



def get_day_info(sheet_id = 0, day = (datetime.today() + timedelta(days=1)+ timedelta(hours=3) ).strftime('%d.%m.%Y') ):
    global SHEET_WEEK
    c = pygsheets.authorize(service_file='client_secret.json')
    sh = c.open_by_url(SHEET_WEEK)
    wks = sh[sheet_id]
    dates = wks.get_values_batch(['C5:Z5'])[0][0]
    dates = [x for x in dates if x]

    days_column_id = ['C6:E35','F6:H35', 'J6:L35','M6:O35','Q6:S35', 'T6:V35', 'W6:Y35']

    if day in dates:

        # –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: id - random
        id = randint(0,4)

        sheet_column_id = days_column_id[dates.index(day)]
        day = wks.get_values_batch(['B6:B35', sheet_column_id]) # two lists with dates and deals
        result = ''
        dict_plans = {} # —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —É—á–µ–Ω–∏–∫–∞–º
        info_students = get_contacts_dict()
        for i, case in enumerate(day[1]):

            if case:
                time = day[0][i][0]
                name = case[0]
                result +=f'{time} - {name} \n'
                contact = info_students.get(name, '–Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ :(')

                if 'group' in name:
                    text_message = get_template_for_group(time, id)
                elif "–Ω–ª–∞–π–Ω" in name:
                    name = name.split()[1]
                    text_message = get_template(name, time, id)
                elif "–£—á–µ–Ω" in name:
                    name = name.split()[0]
                    time = str(int(time[:2])+2) + time[2:]
                    text_message = get_template(name, time, id,  '')
                else:
                    continue

                messages = ['‚óºÔ∏è'*20+f'\n–£—Ä–æ–∫: {name} \n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É:\n'+'‚óºÔ∏è'*20, text_message]
                dict_plans[time] = messages

        return '*'+result+'*', dict_plans
    else:
        return TEXT_ERROR, {}


def get_deal_for_time(time, sheet_id = 0):
    global SHEET_WEEK
    sheet_id = get_sheet_id_with_star(SHEET_WEEK)
    dict_deals = get_dict_time_deals(sheet_id, (datetime.today()+ timedelta(hours=3)).strftime('%d.%m.%Y'))
    if dict_deals == TEXT_ERROR:
        return TEXT_ERROR
    if time in dict_deals.keys():
        return f'–í {time} —É —Ç–µ–±—è –±—É–¥–µ—Ç {dict_deals[time]}'



def get_dict_time_deals(sheet_id = 0, day = (datetime.today()+ timedelta(hours=3)).strftime('%d.%m.%Y') ):  # time: deal
    global SHEET_WEEK
    c = pygsheets.authorize(service_file='client_secret.json')
    sh = c.open_by_url(SHEET_WEEK)
    wks = sh[sheet_id]
    dates = wks.get_values_batch(['C5:Z5'])[0][0]
    dates = [x for x in dates if x]

    days_column_id = ['C6:E35','F6:H35', 'J6:L35','M6:O35','Q6:S35', 'T6:V35', 'W6:Y35']

    if day in dates:
        sheet_column_id = days_column_id[dates.index(day)]
        day = wks.get_values_batch(['B6:B35', sheet_column_id]) # two lists with dates and deals
        dict_plans = {} # time: deal
        for i, case in enumerate(day[1]):
            if case:
                time = day[0][i][0]
                name = case[0]
                dict_plans[time] = name
        return dict_plans
    else:
        return TEXT_ERROR

def get_next_deal():
    try:
        global SHEET_WEEK
        sheet_id = get_sheet_id_with_star(SHEET_WEEK)
        dict_deals = get_dict_time_deals(sheet_id, (datetime.today()+ timedelta(hours=3)).strftime('%d.%m.%Y'))
        now = (datetime.now()+ timedelta(hours=3)).strftime("%H:%M")
        times = list(dict_deals.keys())
        i = 0
        while now>times[i+1]:
            if i+2 == len(times): return '–ë–æ–ª—å—à–µ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç'
            i += 1
        time_deal = times[i+1]
        return f'–ë–ª–∏–∂–∞–π—à–µ–µ –¥–µ–ª–æ —Å–µ–≥–æ–¥–Ω—è –≤ *{time_deal}* - *{dict_deals[time_deal]}*'
    except:
        return TEXT_ERROR

